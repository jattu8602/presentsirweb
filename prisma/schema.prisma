generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SCHOOL
  COACHING
  COLLEGE
}

enum InstitutionType {
  SCHOOL
  COACHING
  COLLEGE
}

enum PlanType {
  BASIC
  PRO
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum FeeStatus {
  PAID
  PENDING
  OVERDUE
}

enum ReportType {
  BEHAVIORAL
  ACADEMIC
  ADMINISTRATIVE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  username         String?        @unique
  password         String?
  role             UserRole       @default(SCHOOL)
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  sessions         Session[]
  school           School?
  teacher          Teacher?
  student          Student?
}

model School {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  userId               String           @unique @db.ObjectId
  user                 User             @relation(fields: [userId], references: [id])
  registeredName       String
  registrationNumber   String           @unique
  institutionType      InstitutionType  @default(SCHOOL)
  streetAddress        String
  city                 String
  district            String
  state               String
  pincode             String
  phoneNumber         String
  email               String           @unique
  principalName       String
  principalPhone      String
  planType            PlanType         @default(BASIC)
  planDuration        Int              @default(1)
  approvalStatus      ApprovalStatus   @default(PENDING)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  teachers            Teacher[]
  students            Student[]
  classes             Class[]
  payments            Payment[]
}

model Student {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolId        String    @db.ObjectId
  userId          String?   @unique @db.ObjectId
  name            String
  rollNumber      String
  dateOfBirth     DateTime?
  gender          String?
  contactNumber   String?
  parentName      String?
  parentPhone     String?
  parentEmail     String?
  address         String?
  admissionDate   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school      School       @relation(fields: [schoolId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])
  attendance  Attendance[]
  fees        Fee[]
  reports     Report[]
  class       Class?       @relation(fields: [classId], references: [id])
  classId     String?      @db.ObjectId

  @@unique([schoolId, rollNumber])
}

model Teacher {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolId        String    @db.ObjectId
  userId          String?   @unique @db.ObjectId
  name            String
  email           String
  phone           String
  subjects        String[]
  qualifications  String[]
  joiningDate     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school  School   @relation(fields: [schoolId], references: [id])
  classes TeacherOnClass[]
  user    User?    @relation(fields: [userId], references: [id])

  @@unique([schoolId, email])
}

model TeacherOnClass {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teacherId String   @db.ObjectId
  classId   String   @db.ObjectId
  assignedAt DateTime @default(now())

  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])

  @@unique([teacherId, classId])
}

model Class {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  schoolId    String   @db.ObjectId
  name        String
  section     String?
  academicYear String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  school   School    @relation(fields: [schoolId], references: [id])
  students Student[]
  teachers TeacherOnClass[]

  @@unique([schoolId, name, section, academicYear])
}

model Attendance {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  studentId String           @db.ObjectId
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  student   Student    @relation(fields: [studentId], references: [id])
}

model Fee {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String    @db.ObjectId
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      FeeStatus
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  student     Student   @relation(fields: [studentId], references: [id])
}

model Report {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String     @db.ObjectId
  type        ReportType
  description String
  date        DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  student     Student    @relation(fields: [studentId], references: [id])
}

model Payment {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolId          String    @db.ObjectId
  amount            Float
  planType          PlanType
  planDuration      Int
  razorpayOrderId   String?   @unique
  razorpayPaymentId String?   @unique
  status            String    @default("PENDING")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  school            School    @relation(fields: [schoolId], references: [id])
}
