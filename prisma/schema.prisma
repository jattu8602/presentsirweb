generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SCHOOL
  TEACHER
  STUDENT
}

enum InstitutionType {
  SCHOOL
  COACHING
  COLLEGE
}

enum PlanType {
  BASIC
  PRO
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum FeeStatus {
  PAID
  PENDING
  OVERDUE
}

enum ReportType {
  BEHAVIORAL
  ACADEMIC
  ADMINISTRATIVE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(SCHOOL)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  school   School?
}

model School {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  userId             String         @unique @db.ObjectId
  registeredName     String
  registrationNumber String         @unique
  type              InstitutionType @default(SCHOOL)
  streetAddress     String
  city              String
  district          String
  state             String
  pincode           String
  officialPhone     String
  officialEmail     String
  principalName     String
  principalPhone    String
  planType          PlanType       @default(BASIC)
  planDuration      Int            @default(1)
  planStartDate     DateTime?
  planEndDate       DateTime?
  approvalStatus    ApprovalStatus @default(PENDING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  students  Student[]
  teachers  Teacher[]
  classes   Class[]
  payments  Payment[]
}

model Student {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolId        String    @db.ObjectId
  name            String
  rollNumber      String
  dateOfBirth     DateTime?
  gender          String?
  contactNumber   String?
  parentName      String?
  parentPhone     String?
  parentEmail     String?
  address         String?
  admissionDate   DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school      School       @relation(fields: [schoolId], references: [id])
  attendance  Attendance[]
  fees        Fee[]
  reports     Report[]
  class       Class?       @relation(fields: [classId], references: [id])
  classId     String?      @db.ObjectId

  @@unique([schoolId, rollNumber])
}

model Teacher {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolId        String    @db.ObjectId
  name            String
  email           String
  phone           String
  subjects        String[]
  qualifications  String[]
  joiningDate     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  school  School   @relation(fields: [schoolId], references: [id])
  classes Class[]

  @@unique([schoolId, email])
}

model Class {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  schoolId    String   @db.ObjectId
  name        String
  section     String?
  academicYear String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  school   School    @relation(fields: [schoolId], references: [id])
  students Student[]
  teachers Teacher[]

  @@unique([schoolId, name, section, academicYear])
}

model Attendance {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  studentId String           @db.ObjectId
  date      DateTime
  status    AttendanceStatus
  remarks   String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  student   Student    @relation(fields: [studentId], references: [id])
}

model Fee {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String    @db.ObjectId
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  status      FeeStatus
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  student     Student   @relation(fields: [studentId], references: [id])
}

model Report {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId   String     @db.ObjectId
  type        ReportType
  description String
  date        DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  student     Student    @relation(fields: [studentId], references: [id])
}

model Payment {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolId          String    @db.ObjectId
  amount            Float
  planType          PlanType
  planDuration      Int
  razorpayOrderId   String?   @unique
  razorpayPaymentId String?   @unique
  status            String    @default("PENDING")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  school            School    @relation(fields: [schoolId], references: [id])
}
